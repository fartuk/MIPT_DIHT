// –ó–∞–¥–∞—á–∞ D. –ê–ª–≥–æ—Ä–∏—Ç–º –ö—Ä—É—Å–∫–∞–ª–∞
// –ò–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: kruskal.in
//        –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: kruskal.out
//        –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: 2 —Å–µ–∫—É–Ω–¥—ã
//        –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏: 64 –º–µ–≥–∞–±–∞–π—Ç–∞
//        –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –≤ —Å–≤—è–∑–Ω–æ–º –≥—Ä–∞—Ñ–µ –æ—Å—Ç–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞.
// –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
//        –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ ùëõ –∏ ùëö ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω
//        –∏ —Ä–µ–±–µ—Ä –≥—Ä–∞—Ñ–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ (1 6 ùëõ 6 20000, 0 6 ùëö 6 100000). –°–ª–µ–¥—É—é—â–∏–µ ùëö —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—Ç
//        –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–±–µ—Ä –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ. –†–µ–±—Ä–æ –Ω–æ–º–µ—Ä ùëñ –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ç—Ä–µ–º—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
//        ùëèùëñ ùëíùëñ –∏ ùë§ùëñ ‚Äî –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ü–æ–≤ —Ä–µ–±—Ä–∞ –∏ –µ–≥–æ –≤–µ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
// –ì—Ä–∞—Ñ —è–≤–ª—è–µ—Ç—Å—è —Å–≤—è–∑–Ω—ã–º.
// –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
//        –í—ã–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ - –≤–µ—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–æ–≤–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.

#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>

using std::vector;
using std::cout;
using std::cin;

// –°–∏—Å—Ç–µ–º–∞ –Ω–µ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤.
class DSU {
public:
    vector<int> parent_;
    vector<int> rang_;
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—Ç —á–∏—Å–ª–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞—Ö.
    DSU(int count){
        for (int i = 0; i < count + 1; ++i) {
            parent_.push_back(i);
            rang_.push_back(1);
        }
    };
    // –ö–æ—Ä–µ–Ω—å –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, –≤ –∫–∞–∫–æ–º –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–µ –ª–µ–∂–∏—Ç –≤–µ—Ä—à–∏–Ω–∞.
    int find_root(int vert_to_find){
        if (parent_[vert_to_find] == vert_to_find){
            return vert_to_find;
        } else {
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á–∞—Å—Ç—å –ø—É—Ç–µ–π –ø—Ä–∏ —Ä–∞—Å–∫—Ä—É—á–∏–≤–∞–Ω–∏–∏ —Å—Ç–µ–∫–∞.
            return parent_[vert_to_find] = find_root(parent_[vert_to_find]);
        }
    }
    // –°–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤ –≤ –æ–¥–Ω–æ
    void union_vert(int vert_a, int vert_b){
        vert_a = find_root(vert_a);
        vert_b = find_root(vert_b);
        if (vert_a != vert_b) {
            if (rang_[vert_a] > rang_[vert_b]){
                parent_[vert_b] = vert_a;
                rang_[vert_a] = rang_[vert_a] + rang_[vert_b];
            } else{
                parent_[vert_b] = vert_a;
                rang_[vert_b] = rang_[vert_b] + rang_[vert_a];
            }
        }
    }
};

// –†–µ–±—Ä–æ.
class Edge {
public:
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
    Edge(int first_vert,int second_vert, int length) {
        first_vert_ = first_vert;
        second_vert_ = second_vert;
        length_ = length;
    }
    int first_vert_;
    int second_vert_;
    int length_;
};

// –ö–æ–º–ø–∞—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –†—ë–±–µ—Ä.
class Compare {
public:
    bool operator()(Edge a, Edge b) {
        return a.length_ < b.length_;
    }
};

int main() {
    std::ifstream fin("kruskal.in");
    std::ofstream fout("kruskal.out");
    int vert_count = 0;
    int edge_count = 0;
    // –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥—Ä–∞—Ñ–∞.
    fin >> vert_count >> edge_count;
    // –í–µ–∫—Ç–æ—Ä, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è —Ä–µ–±—Ä–∞.
    vector<Edge> edges;
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ —Ä—ë–±–µ—Ä.
    for (int i = 0; i < edge_count; ++i) {
        int tmp_first_vert = 0;
        int tmp_second_vert = 0;
        int tmp_length = 0;
        fin >> tmp_first_vert >> tmp_second_vert >> tmp_length;
        Edge tmp_edge(tmp_first_vert, tmp_second_vert, tmp_length);
        edges.push_back(tmp_edge);
    }
    Compare comparator;
    std::sort(edges.begin(), edges.end(), comparator);
    DSU dsu(vert_count);
    int sum = 0;
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–µ–∫—Ç–æ—Ä—É —Ä—ë–±–µ—Ä
    // –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–µ —Ä–µ–±—Ä–æ
    for (int j = 0; j < edge_count; ++j) {
        int vert_a = edges[j].first_vert_;
        int vert_b = edges[j].second_vert_;
        int length  = edges[j].length_;
        if (dsu.find_root(vert_a) != dsu.find_root(vert_b)) {
            dsu.union_vert(vert_a, vert_b);
            sum += length;
        }
    }
    fout << sum;
    return 0;
}